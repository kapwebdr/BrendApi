API BRENDA - Documentation Complète des Services
==============================================

1. Service LLM (Large Language Models)
-----------------------------------

1.1 Liste des Modèles LLM
------------------------
Endpoint : GET /v1/ai/models
Description : Récupère la liste des modèles LLM disponibles
Retour : 
{
    "models": ["model1", "model2", ...]
}

1.2 Chargement d'un Modèle
-------------------------
Endpoint : POST /v1/ai/load_model
Corps :
{
    "model_name": string
}

1.3 Génération de Texte
----------------------
Endpoint : POST /v1/ai/generate
Corps :
{
    "model": string,
    "messages": [
        {
            "role": string,
            "content": string
        }
    ],
    "stream": boolean
}

1.4 État de la Session
--------------------
Endpoint : GET /v1/ai/session
Retour :
{
    "session_id": string,
    "current_model": string,
    "has_model_loaded": boolean
}

1.5 Arrêt de la Génération
------------------------
Endpoint : POST /v1/ai/stop

2. Service Image
--------------

2.1 Liste des Modèles d'Image
---------------------------
Endpoint : GET /v1/ai/image/models
Retour :
{
    "models": ["model1", "model2", ...]
}

2.2 Génération d'Image
--------------------
Endpoint : POST /v1/ai/image/generate
Corps :
{
    "prompt": string,
    "negative_prompt": string,
    "width": integer,
    "height": integer,
    "steps": integer
}

2.3 Raffinement d'Image
---------------------
Endpoint : POST /v1/ai/image/refine
Corps :
{
    "image": string,
    "prompt": string,
    "negative_prompt": string,
    "strength": float,
    "steps": integer
}

2.4 Analyse d'Image
-----------------
Endpoint : POST /v1/ai/image/analyze
Corps :
{
    "image": string,
    "labels": [string]
}

2.5 OCR (Reconnaissance de Texte)
------------------------------
Endpoint : POST /v1/ai/image/ocr
Corps :
{
    "image": string,
    "lang": string
}

3. Service de Traduction
----------------------

3.1 Liste des Langues
-------------------
Endpoint : GET /v1/ai/translation/languages
Retour :
{
    "languages": ["fr", "en", ...]
}

3.2 Traduction
------------
Endpoint : POST /v1/ai/translation/translate
Corps :
{
    "text": string,
    "from_lang": string,
    "to_lang": string
}

4. Service Audio
--------------

4.1 Liste des Modèles Audio
-------------------------
Endpoint : GET /v1/ai/speech/models
Retour :
{
    "stt": {
        "whisper": {
            "name": "Faster Whisper",
            "type": "transcription",
            "models": {...}  // Configuration détaillée des modèles
        }
    },
    "tts": {
        "xtts_v2": {...},   // Configuration XTTS
        "vits": {...},       // Configuration VITS
        "bark": {...},       // Configuration Bark
        "tortoise": {...},   // Configuration Tortoise
        "coqui": {...},      // Configuration Coqui Base Models
        "custom_models": {...} // Configuration Custom Models
    }
}

4.2 Text-to-Speech
----------------
Endpoint : POST /v1/ai/speech/text-to-speech
Corps :
{
    "text": string,
    "model_type": string,  // "xtts_v2", "vits", "bark", "tortoise", "coqui"
    "voice": string,       // Dépend du model_type
    "language": string,    // Requis pour certains modèles
    "stream": boolean      // Optionnel, défaut true
}

4.3 Speech-to-Text
----------------
Endpoint : POST /v1/ai/speech/speech-to-text
Corps :
{
    "audio": string,      // Audio en base64
    "model_size": string  // "tiny", "base", "small", "medium", "large"
}

Retour : Stream d'événements SSE
Format des événements :
1. Pour le texte complet :
{
    "text": string
}

2. Pour les segments :
{
    "type": "segment",
    "text": string,
    "start": float,
    "end": float,
    "probability": float
}

3. Pour le statut :
{
    "status": "completed",
    "text": string
}

4.4 Arrêt du Traitement
---------------------
Endpoint : POST /v1/ai/speech/stop
Retour :
{
    "status": "stopped"
}

5. Service Media
--------------

5.1 Analyse d'URL
---------------
Endpoint : POST /v1/ai/media/url/analyze
Corps :
{
    "url": string
}

5.2 Extraction de Contenu
----------------------
Endpoint : POST /v1/ai/media/url/extract
Corps :
{
    "url": string
}

5.3 Streaming d'URL
-----------------
Endpoint : POST /v1/ai/media/url/stream
Corps :
{
    "url": string
}

6. Service de Monitoring
----------------------

6.1 Statistiques Système
----------------------
Endpoint : GET /v1/monitor/system/stats
Retour :
{
    "cpu_percent": float,
    "memory": {
        "total": int,
        "available": int,
        "percent": float
    },
    "disk": {
        "total": int,
        "used": int,
        "free": int,
        "percent": float
    }
}

6.2 Liste des Conteneurs
----------------------
Endpoint : GET /v1/monitor/containers
Retour : Array de conteneurs Brenda
[
    {
        "id": string,
        "name": string,
        "status": string,
        "image": string,
        "created": string,
        "ports": object,
        "stats": {
            "cpu_percent": float,
            "memory_percent": float,
            "memory_usage": int,
            "memory_limit": int
        }
    }
]

6.3 Gestion des Conteneurs
------------------------
- POST /v1/monitor/containers/{container_id}/start
- POST /v1/monitor/containers/{container_id}/stop
- POST /v1/monitor/containers/{container_id}/restart
- GET /v1/monitor/containers/{container_id}/logs
- GET /v1/monitor/containers/{container_id}/stats

7. Service de Chaînage (Chaining)
------------------------------

7.1 Chat Multimodal
-----------------
Endpoint : POST /v1/ai/chaining/chat
Description : Permet une conversation avec entrée texte ou audio et retourne texte + audio
Corps :
{
    "text": string,      // Texte d'entrée (optionnel)
    "audio": string      // Audio en base64 (optionnel)
}

Note: Au moins un des deux champs (text ou audio) doit être fourni.

Retour : Stream d'événements SSE
Format des événements :
1. Pour le texte :
{
    "type": "text",
    "content": string    // Texte généré
}

2. Pour l'audio :
{
    "type": "audio",
    "content": string    // Audio en base64
}

3. Fin du stream :
data: {{"status": "completed"}}\n\n'

Exemple d'utilisation :
```javascript
const response = await fetch('/v1/ai/chaining/chat', {
    method: 'POST',
    body: JSON.stringify({
        text: "Bonjour, comment vas-tu ?"
        // ou audio: "base64_audio_data"
    })
});

const reader = response.body.getReader();
const decoder = new TextDecoder();

while (true) {
    const {value, done} = await reader.read();
    if (done) break;
    
    const events = decoder.decode(value).split('\n\n');
    for (const event of events) {
        if (event.startsWith('data: ')) {
            const data = JSON.parse(event.slice(6));
            if (data.type === 'text') {
                // Afficher le texte
                console.log(data.content);
            } else if (data.type === 'audio') {
                // Jouer l'audio
                const audio = new Audio(`data:audio/wav;base64,${data.content}`);
                await audio.play();
            }
        }
    }
}
```

Caractéristiques :
- Transcription automatique de l'audio en texte (Whisper small)
- Génération de réponse via LLM
- Synthèse vocale en français avec voix Elise
- Streaming bidirectionnel (texte + audio)
- Historisation des conversations

Notes Techniques :
- Format audio accepté : WAV en base64
- Modèle STT par défaut : Whisper small
- Voix TTS par défaut : Elise (français)
- Taille maximale audio : 100MB
- Timeout : 600 secondes

Codes d'erreur :
- 400 : Aucune entrée fournie (ni texte ni audio)
- 500 : Erreur de traitement (transcription, génération ou synthèse)
- 503 : Service temporairement indisponible

Notes Techniques
--------------

1. Format des Données
-------------------
- Images : Base64 (formats acceptés : PNG, JPEG, WebP)
- Audio : Base64 (format WAV)
- Texte : UTF-8
- JSON : Content-Type: application/json

2. Headers Requis
---------------
- Content-Type: application/json
- X-Session-ID: string (optionnel, généré si absent)

3. Gestion des Erreurs
--------------------
Codes HTTP standards :
- 200 : Succès
- 400 : Requête invalide
- 401 : Non autorisé
- 404 : Ressource non trouvée
- 500 : Erreur serveur

4. Streaming
-----------
Format SSE (Server-Sent Events) pour :
- Génération de texte
- Génération d'images
- Text-to-Speech
- Streaming média

5. CORS
-------
- Origines autorisées : *
- Méthodes : GET, POST, OPTIONS
- Headers : *
- Credentials : true

6. Limitations
------------
- Taille max requête : 100MB
- Timeout : 600 secondes
- Rate limiting : Configuré par nginx

7. Exemples d'Utilisation
-----------------------

# Service Files API

Le service Files gère toutes les opérations liées aux fichiers et répertoires.

## Endpoints

### Gestion des répertoires

POST /v1/files/directory/create
- Crée un nouveau répertoire
- Corps: { "path": string }
- Retour: 
{
    "status": "success",
    "message": string,
    "timestamp": string
}

POST /v1/files/compress
- Compresse un répertoire en ZIP
- Corps: { 
    "path": string,
    "zip_name": string (optionnel)
}
- Retour: Stream d'événements SSE
Format des événements:
1. Pour la progression:
{
    "progress": number,
    "file": string
}
2. Pour le statut final:
{
    "status": "completed",
    "path": string,
    "size": number
}

### Gestion des fichiers

POST /v1/files/upload
- Upload un ou plusieurs fichiers
- FormData: 
  - files: Liste des fichiers (multipart/form-data)
  - path: string (chemin de destination)
- Retour:
{
    "uploads": [
        {
            "status": "success",
            "message": string,
            "size": number,
            "timestamp": string
        }
    ]
}

POST /v1/files/stream
- Stream un fichier en chunks
- Corps: { "path": string }
- Retour: Stream d'événements SSE
Format des événements:
1. Pour les chunks:
{
    "chunk": string (base64),
    "progress": number
}
2. Pour le statut final:
{
    "status": "completed",
    "path": string,
    "size": number
}

POST /v1/files/decompress
- Décompresse un fichier ZIP
- Corps: { 
    "path": string,
    "extract_path": string (optionnel)
}
- Retour:
{
    "status": "success",
    "message": string,
    "timestamp": string
}

### Navigation

POST /v1/files/list
- Liste le contenu d'un répertoire
- Corps: { "path": string (optionnel, défaut: "") }
- Retour:
{
    "status": "success",
    "path": string,
    "items": [
        {
            "name": string,
            "type": "directory" | "file",
            "size": number (null pour les dossiers),
            "modified": string (ISO 8601)
        }
    ],
    "timestamp": string
}

### Monitoring

GET /ready
- Vérifie si le service est prêt
- Retour: { "status": "ready" }

### Notes Techniques

- Base path: /app/Shared
- Validation des chemins pour la sécurité
- Support du streaming pour les gros fichiers
- Gestion des erreurs avec codes HTTP appropriés
- Timestamps en format ISO 8601
- Taille des chunks configurable (défaut: 8192 bytes)
- Support des opérations asynchrones

### Gestion des fichiers et répertoires

POST /v1/files/move
- Déplace un fichier ou un répertoire
- Corps: { 
    "source": string,      // Chemin source
    "destination": string  // Chemin de destination
}
- Retour:
{
    "status": "success",
    "message": string,     // Message indiquant si c'est un fichier ou dossier
    "source": string,
    "destination": string,
    "timestamp": string    // Format ISO 8601
}

POST /v1/files/compress
- Compresse un fichier ou répertoire en ZIP
- Corps: { 
    "path": string,           // Chemin du fichier/dossier à compresser
    "zip_name": string,       // (optionnel) Nom du fichier zip de sortie
    "is_directory": boolean   // (optionnel) Indique si c'est un dossier
}
- Retour: Stream d'événements SSE
Format des événements:
1. Pour la progression:
{
    "type": "progress",
    "progress": number,      // Pourcentage (0-100)
    "file": string,         // Fichier en cours
    "total_files": number,  // Nombre total de fichiers
    "current_file": number  // Numéro du fichier en cours
}
2. Pour le statut final:
{
    "type": "completed",
    "status": "success",
    "path": string,         // Chemin du ZIP créé
    "size": number         // Taille en bytes
}

POST /v1/files/decompress
- Décompresse un fichier ZIP
- Corps: { 
    "path": string,           // Chemin du fichier ZIP
    "extract_path": string    // (optionnel) Chemin d'extraction
}
- Retour: Stream d'événements SSE
Format des événements:
1. Pour la progression:
{
    "type": "progress",
    "progress": number,      // Pourcentage (0-100)
    "file": string,         // Fichier en cours
    "total_files": number,  // Nombre total de fichiers
    "current_file": number  // Numéro du fichier en cours
}
2. Pour le statut final:
{
    "type": "completed",
    "status": "success",
    "path": string,         // Chemin d'extraction
    "files_extracted": number // Nombre de fichiers extraits
}

POST /v1/files/rename
- Renomme un fichier ou un répertoire
- Corps: { 
    "path": string,       // Chemin de l'élément à renommer
    "new_name": string    // Nouveau nom (sans séparateur de chemin)
}
- Retour:
{
    "status": "success",
    "message": string,     // Message indiquant si c'est un fichier ou dossier
    "old_path": string,    // Ancien chemin
    "new_path": string,    // Nouveau chemin
    "timestamp": string    // Format ISO 8601
}

Limitations:
- Le nouveau nom ne peut pas contenir de séparateurs de chemin (/ ou \)
- L'élément à renommer doit exister
- Le nouveau nom ne doit pas déjà exister dans le même dossier

Codes d'erreur:
- 400: Chemin source non trouvé
- 400: Nouveau nom invalide (contient des séparateurs)
- 409: Un élément existe déjà avec ce nom
- 500: Erreur pendant le renommage

8. Service History (MongoDB)
-------------------------

8.1 Historique des Conversations
-----------------------------
Endpoint : GET /v1/history/conversation/{id}
Headers requis : X-Session-ID
Description : Récupère une conversation complète avec tous ses messages
Retour :
{
    "id": string,
    "title": string,
    "created_at": string,
    "messages": [
        {
            "timestamp": string,
            "role": string,
            "message": any,
            "metadata": {
                "model": string,
                "parameters": object,
                ...
            }
        }
    ]
}

8.2 Liste des Conversations
------------------------
Endpoint : GET /v1/history/conversations
Headers requis : X-Session-ID
Description : Liste toutes les conversations de la session courante
Retour :
{
    "conversations": [
        {
            "id": string,
            "title": string,
            "created_at": string
        }
    ]
}

8.3 Sauvegarde d'un Message
------------------------
Endpoint : POST /v1/history/conversation
Headers requis : X-Session-ID
Description : Ajoute un message à une conversation existante ou crée une nouvelle conversation
Corps :
{
    "id": string (optionnel),
    "role": string,
    "message": any,
    "metadata": {
        "model": string,
        "temperature": number,
        "parameters": object,
        ...
    }
}
Retour :
{
    "status": "success",
    "id": string,
    "title": string,
    "message_id": string
}

8.4 Suppression d'une Conversation
------------------------------
Endpoint : DELETE /v1/history/conversation/{id}
Headers requis : X-Session-ID
Description : Supprime une conversation et tous ses messages
Sécurité : Vérifie que la conversation appartient à la session courante
Retour :
{
    "status": "success",
    "message": string
}

8.5 Suppression de l'Historique d'une Session
----------------------------------------
Endpoint : DELETE /v1/history/session/{session_id}
Headers requis : X-Session-ID
Description : Supprime toutes les conversations de la session
Sécurité : Vérifie que le session_id correspond à celui du header
Retour :
{
    "status": "success",
    "message": string,
    "deleted_conversations": int
}

Notes Techniques pour History
--------------------------
- Stockage persistant dans MongoDB
- Structure de conversation unifiée :
  * Une conversation contient un tableau de messages
  * Le titre est généré à partir du premier message
  * Chaque message inclut son horodatage et ses métadonnées
- Tri automatique des conversations par date de création (plus récente en premier)
- Timestamps en format ISO 8601
- Authentification via X-Session-ID header
- Isolation des données par session
- Suppression en cascade (la suppression d'une conversation supprime tous ses messages)

Codes d'Erreur Spécifiques
------------------------
- 400 : Paramètres manquants ou invalides
- 403 : Tentative d'accès à une conversation d'une autre session
- 404 : Conversation non trouvée
- 500 : Erreur interne du serveur

Exemples d'Utilisation
--------------------
```javascript
const headers = {
    'X-Session-ID': 'votre-session-id',
    'Content-Type': 'application/json'
};

// Créer une nouvelle conversation
const newConv = await fetch('/v1/history/conversation', {
    method: 'POST',
    headers,
    body: JSON.stringify({
        role: "user",
        message: "Bonjour!"
    })
});

// Ajouter à une conversation existante
await fetch('/v1/history/conversation', {
    method: 'POST',
    headers,
    body: JSON.stringify({
        id: "conversation-id",
        role: "assistant",
        message: "Bonjour! Comment puis-je vous aider?"
    })
});

// Supprimer une conversation
await fetch('/v1/history/conversation/conversation-id', {
    method: 'DELETE',
    headers
});

// Supprimer tout l'historique de la session
await fetch('/v1/history/session/votre-session-id', {
    method: 'DELETE',
    headers
});
```

POST /v1/files/preview
- Renvoie le contenu d'un fichier pour prévisualisation
- Corps: { 
    "path": string    // Chemin du fichier
}
- Retour:
{
    "status": "success",
    "mime_type": string,     // Type MIME du fichier
    "content": string,       // Contenu (texte ou base64 pour binaire)
    "size": number,          // Taille en bytes
    "timestamp": string      // Format ISO 8601
}

Types de fichiers supportés:
- Texte: txt, json, xml, md, etc.
- Images: jpg, png, gif, webp, etc.
- Audio: mp3, wav, ogg, etc.
- Vidéo: mp4, webm, etc.
- PDF: pdf

Limitations:
- Taille maximale: 10MB
- Encodage texte: UTF-8
- Contenu binaire: encodé en base64

Codes d'erreur:
- 400: Chemin non fourni
- 404: Fichier non trouvé
- 413: Fichier trop volumineux
- 415: Type de fichier non supporté
- 500: Erreur de lecture

# Ajout dans la section "Service Files API"

### Gestion de l'Index ChromaDB

POST /v1/files/index
- Indexe un fichier ou un répertoire dans ChromaDB
- Corps: { 
    "path": string,           // Chemin de l'élément à indexer
    "is_directory": boolean,  // true si c'est un dossier
    "metadata": object       // Métadonnées optionnelles
}
- Retour:
{
    "status": "success",
    "message": string,
    "timestamp": string
}

GET /v1/files/index/{path}
- Récupère les informations d'un élément indexé
- Retour:
{
    "path": string,
    "type": "file" | "directory",
    "content": string,        // Base64 pour les fichiers
    "size": number,          // Pour les fichiers
    "metadata": object,
    "created_at": string
}

GET /v1/files/index
- Liste tous les éléments indexés
- Paramètres query:
    - type: string (optionnel) - Filtre par type ("file" ou "directory")
- Retour:
{
    "items": [
        {
            "path": string,
            "type": string,
            "metadata": object,
            "created_at": string
        }
    ]
}

DELETE /v1/files/index/{path}
- Supprime un élément de l'index
- Retour:
{
    "status": "success",
    "message": string
}

POST /v1/files/index/search
- Recherche dans les éléments indexés
- Corps: {
    "query": string,
    "type": string,         // Optionnel, filtre par type
    "n_results": number     // Optionnel, défaut: 10
}
- Retour:
{
    "results": [
        {
            "id": string,           // Identifiant unique
            "path": string,         // Chemin du fichier/dossier
            "type": string,         // "file" ou "directory"
            "metadata": object,      // Métadonnées personnalisées
            "distance": number,      // Score de similarité (0-1)
            "document": object      // Contenu indexé
        }
    ]
}

Notes Techniques pour l'Indexation:
- Utilise ChromaDB comme backend vectoriel
- Indexation automatique du contenu des fichiers
- Support des métadonnées personnalisées
- Recherche sémantique sur le contenu
- Indexation récursive des dossiers
- Formats supportés identiques à /preview
- Taille maximale par fichier: 10MB
- Mise à jour automatique lors des modifications
- Persistance des données
- Recherche par similarité vectorielle
- Support du filtrage par type et métadonnées
- Gestion des versions de documents

6. Service Storage
----------------

6.1 Stockage Général
------------------
Endpoint : POST /v1/storage/set
Corps :
{
    "key": string,
    "value": any,
    "collection": string  // Optionnel, défaut: "default"
}
Retour :
{
    "status": "success",
    "key": string
}

6.2 Récupération
--------------
Endpoint : GET /v1/storage/get/{collection}/{key}
Retour : Les données stockées ou 404 si non trouvées

6.3 Suppression
-------------
Endpoint : DELETE /v1/storage/delete/{collection}/{key}
Retour :
{
    "status": "success",
    "key": string
}

6.4 Liste des Données
------------------
Endpoint : GET /v1/storage/list/{collection}
Paramètres query:
- pattern: string (optionnel, défaut: "*")
Retour : Liste des clés ou documents selon le backend

6.5 Recherche
-----------
Endpoint : POST /v1/storage/search
Corps :
{
    "query": string,
    "collection": string,  // Optionnel, défaut: "default"
    "n_results": number   // Optionnel, défaut: 10
}
Retour :
{
    "results": [
        {
            "id": string,
            "document": object,
            "metadata": object,
            "distance": number  // Pour ChromaDB uniquement
        }
    ]
}

Notes Techniques:
- Supporte trois backends: Redis, MongoDB, ChromaDB
- Configuration via variables d'environnement:
  - STORAGE_BACKEND: "redis" | "mongo" | "chroma"
  - REDIS_HOST: string
  - REDIS_PORT: number
  - MONGO_URL: string
  - MONGO_DB: string
  - CHROMA_PERSIST_DIR: string
- Gestion automatique des conversions JSON
- Support des métadonnées pour ChromaDB
- Recherche vectorielle disponible uniquement avec ChromaDB
- Persistance des données selon le backend choisi
- Gestion des erreurs avec codes HTTP standards

Codes d'erreur:
- 400: Paramètres manquants ou invalides
- 404: Données non trouvées
- 500: Erreur interne du service

